// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/device/command": {
            "post": {
                "description": "Enqueue command to device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Send command to device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "identity",
                        "name": "identity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "command",
                        "name": "command",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "callback_id",
                        "name": "callback_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    }
                }
            }
        },
        "/device/directcommand": {
            "post": {
                "description": "Send packet to IP:port",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Send command to IP and port using UDP protocol",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ip",
                        "name": "ip",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "port",
                        "name": "port",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "command",
                        "name": "command",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    }
                }
            }
        },
        "/device/identity_exists": {
            "get": {
                "description": "Checks device by device identity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Checks device is currently connected to service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "identity",
                        "name": "identity",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    }
                }
            }
        },
        "/device/locate": {
            "get": {
                "description": "Returns locate command",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Get locate command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "identity",
                        "name": "identity",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Enqueue location request to device",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Send locate request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "identity",
                        "name": "identity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "callback_id",
                        "name": "callback_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    }
                }
            }
        },
        "/device/update_config": {
            "post": {
                "description": "Enqueue configuration to device",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Send configuration to device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "identity",
                        "name": "identity",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "callback_id",
                        "name": "callback_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "config",
                        "name": "config",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.FacadeResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "response.FacadeResponse": {
            "type": "object",
            "properties": {
                "CallbackId": {
                    "type": "string"
                },
                "Code": {
                    "type": "string"
                },
                "Comment": {
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string"
                },
                "ExecutedCommand": {
                    "type": "string"
                },
                "Success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
